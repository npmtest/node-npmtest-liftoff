{"/home/travis/build/npmtest/node-npmtest-liftoff/test.js":"/* istanbul instrument in package npmtest_liftoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-liftoff/lib.npmtest_liftoff.js":"/* istanbul instrument in package npmtest_liftoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_liftoff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_liftoff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-liftoff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-liftoff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_liftoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_liftoff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_liftoff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_liftoff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_liftoff.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_liftoff.__dirname +\n                    '/lib.npmtest_liftoff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/index.js":"const fs = require('fs');\nconst util = require('util');\nconst path = require('path');\nconst EE = require('events').EventEmitter;\n\nconst extend = require('extend');\nconst resolve = require('resolve');\nconst flaggedRespawn = require('flagged-respawn');\nconst isPlainObject = require('lodash.isplainobject');\nconst mapValues = require('lodash.mapvalues');\nconst fined = require('fined');\n\nconst findCwd = require('./lib/find_cwd');\nconst findConfig = require('./lib/find_config');\nconst fileSearch = require('./lib/file_search');\nconst parseOptions = require('./lib/parse_options');\nconst silentRequire = require('./lib/silent_require');\nconst buildConfigName = require('./lib/build_config_name');\nconst registerLoader = require('./lib/register_loader');\n\n\nfunction Liftoff (opts) {\n  EE.call(this);\n  extend(this, parseOptions(opts));\n}\nutil.inherits(Liftoff, EE);\n\nLiftoff.prototype.requireLocal = function (module, basedir) {\n  try {\n    var result = require(resolve.sync(module, {basedir: basedir}));\n    this.emit('require', module, result);\n    return result;\n  } catch (e) {\n    this.emit('requireFail', module, e);\n  }\n};\n\nLiftoff.prototype.buildEnvironment = function (opts) {\n  opts = opts || {};\n\n  // get modules we want to preload\n  var preload = opts.require || [];\n\n  // ensure items to preload is an array\n  if (!Array.isArray(preload)) {\n    preload = [preload];\n  }\n\n  // make a copy of search paths that can be mutated for this run\n  var searchPaths = this.searchPaths.slice();\n\n  // calculate current cwd\n  var cwd = findCwd(opts);\n\n  // if cwd was provided explicitly, only use it for searching config\n  if (opts.cwd) {\n    searchPaths = [cwd];\n  } else {\n    // otherwise just search in cwd first\n    searchPaths.unshift(cwd);\n  }\n\n  // calculate the regex to use for finding the config file\n  var configNameSearch = buildConfigName({\n    configName: this.configName,\n    extensions: Object.keys(this.extensions)\n  });\n\n  // calculate configPath\n  var configPath = findConfig({\n    configNameSearch: configNameSearch,\n    searchPaths: searchPaths,\n    configPath: opts.configPath\n  });\n\n  // if we have a config path, save the directory it resides in.\n  var configBase;\n  if (configPath) {\n    configBase = path.dirname(configPath);\n    // if cwd wasn't provided explicitly, it should match configBase\n    if (!opts.cwd) {\n      cwd = configBase;\n    }\n    // resolve symlink if needed\n    if (fs.lstatSync(configPath).isSymbolicLink()) {\n      configPath = fs.realpathSync(configPath);\n    }\n  }\n\n  // TODO: break this out into lib/\n  // locate local module and package next to config or explicitly provided cwd\n  var modulePath, modulePackage;\n  try {\n    var delim = (process.platform === 'win32' ? ';' : ':'),\n        paths = (process.env.NODE_PATH ? process.env.NODE_PATH.split(delim) : []);\n    modulePath = resolve.sync(this.moduleName, {basedir: configBase || cwd, paths: paths});\n    modulePackage = silentRequire(fileSearch('package.json', [modulePath]));\n  } catch (e) {}\n\n  // if we have a configuration but we failed to find a local module, maybe\n  // we are developing against ourselves?\n  if (!modulePath && configPath) {\n    // check the package.json sibling to our config to see if its `name`\n    // matches the module we're looking for\n    var modulePackagePath = fileSearch('package.json', [configBase]);\n    modulePackage = silentRequire(modulePackagePath);\n    if (modulePackage && modulePackage.name === this.moduleName) {\n      // if it does, our module path is `main` inside package.json\n      modulePath = path.join(path.dirname(modulePackagePath), modulePackage.main || 'index.js');\n      cwd = configBase;\n    } else {\n      // clear if we just required a package for some other project\n      modulePackage = {};\n    }\n  }\n\n  // load any modules which were requested to be required\n  if (preload.length) {\n    // unique results first\n    preload.filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (dep) {\n      this.requireLocal(dep, findCwd(opts));\n    }, this);\n  }\n\n  var exts = this.extensions;\n  var eventEmitter = this;\n  registerLoader(eventEmitter, exts, configPath, cwd);\n\n  var configFiles = {};\n  if (isPlainObject(this.configFiles)) {\n    var notfound = { path: null };\n    configFiles = mapValues(this.configFiles, function(prop, name) {\n      var defaultObj = { name: name, cwd: cwd, extensions: exts };\n      return mapValues(prop, function(pathObj) {\n        var found = fined(pathObj, defaultObj) || notfound;\n        if (isPlainObject(found.extension)) {\n          registerLoader(eventEmitter, found.extension, found.path, cwd);\n        }\n        return found.path;\n      });\n    });\n  }\n\n  return {\n    cwd: cwd,\n    require: preload,\n    configNameSearch: configNameSearch,\n    configPath: configPath,\n    configBase: configBase,\n    modulePath: modulePath,\n    modulePackage: modulePackage || {},\n    configFiles: configFiles\n  };\n};\n\nLiftoff.prototype.handleFlags = function (cb) {\n  if (typeof this.v8flags === 'function') {\n    this.v8flags(function (err, flags) {\n      if (err) {\n        cb(err);\n      } else {\n        cb(null, flags);\n      }\n    });\n  } else {\n    process.nextTick(function () {\n      cb(null, this.v8flags);\n    }.bind(this));\n  }\n};\n\nLiftoff.prototype.launch = function (opts, fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('You must provide a callback function.');\n  }\n  process.title = this.processTitle;\n\n  var completion = opts.completion;\n  if (completion && this.completions) {\n    return this.completions(completion);\n  }\n\n  this.handleFlags(function (err, flags) {\n    if (err) {\n      throw err;\n    } else {\n      if (flags) {\n        flaggedRespawn(flags, process.argv, function (ready, child) {\n          if (child !== process) {\n            this.emit('respawn', process.argv.filter(function (arg) {\n              var flag = arg.split('=')[0];\n              return flags.indexOf(flag) !== -1;\n            }.bind(this)), child);\n          }\n          if (ready) {\n            fn.call(this, this.buildEnvironment(opts));\n          }\n        }.bind(this));\n      } else {\n        fn.call(this, this.buildEnvironment(opts));\n      }\n    }\n  }.bind(this));\n};\n\n\n\nmodule.exports = Liftoff;\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/find_cwd.js":"const path = require('path');\n\nmodule.exports = function (opts) {\n  if (!opts) {\n    opts = {};\n  }\n  var cwd = opts.cwd;\n  var configPath = opts.configPath;\n  // if a path to the desired config was specified\n  // but no cwd was provided, use configPath dir\n  if (typeof configPath === 'string' && !cwd) {\n    cwd = path.dirname(path.resolve(configPath));\n  }\n  if (typeof cwd === 'string') {\n    return path.resolve(cwd);\n  }\n  return process.cwd();\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/find_config.js":"const fs = require('fs');\nconst path = require('path');\nconst fileSearch = require('./file_search');\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  var configNameSearch = opts.configNameSearch;\n  var configPath = opts.configPath;\n  var searchPaths = opts.searchPaths;\n  // only search for a config if a path to one wasn't explicitly provided\n  if (!configPath) {\n    if (!Array.isArray(searchPaths)) {\n      throw new Error('Please provide an array of paths to search for config in.');\n    }\n    if (!configNameSearch) {\n      throw new Error('Please provide a configNameSearch.');\n    }\n    configPath = fileSearch(configNameSearch, searchPaths);\n  }\n  // confirm the configPath exists and return an absolute path to it\n  if (fs.existsSync(configPath)) {\n    return path.resolve(configPath);\n  }\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/file_search.js":"const findup = require('findup-sync');\n\nmodule.exports = function (search, paths) {\n  var path;\n  var len = paths.length;\n  for (var i = 0; i < len; i++) {\n    if (path) {\n      break;\n    } else {\n      path = findup(search, {cwd: paths[i], nocase: true});\n    }\n  }\n  return path;\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/parse_options.js":"const extend = require('extend');\n\nmodule.exports = function (opts) {\n  var defaults = {\n    extensions: {\n      '.js': null,\n      '.json': null\n    },\n    searchPaths: []\n  };\n  if (!opts) {\n    opts = {};\n  }\n  if (opts.name) {\n    if (!opts.processTitle) {\n      opts.processTitle = opts.name;\n    }\n    if (!opts.configName) {\n      opts.configName = opts.name + 'file';\n    }\n    if (!opts.moduleName) {\n      opts.moduleName = opts.name;\n    }\n  }\n  if (!opts.processTitle) {\n    throw new Error('You must specify a processTitle.');\n  }\n  if (!opts.configName) {\n    throw new Error('You must specify a configName.');\n  }\n  if (!opts.moduleName) {\n    throw new Error('You must specify a moduleName.');\n  }\n  return extend(defaults, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/silent_require.js":"module.exports = function (path) {\n  try {\n    return require(path);\n  } catch (e) {}\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/build_config_name.js":"module.exports = function (opts) {\n  opts = opts || {};\n  var configName = opts.configName;\n  var extensions = opts.extensions;\n  if (!configName) {\n    throw new Error('Please specify a configName.');\n  }\n  if (configName instanceof RegExp) {\n    return [configName];\n  }\n  if (!Array.isArray(extensions)) {\n    throw new Error('Please provide an array of valid extensions.');\n  }\n  return extensions.map(function (ext) {\n    return configName + ext;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-liftoff/liftoff/lib/register_loader.js":"const rechoir = require('rechoir');\nconst isString = require('lodash.isstring');\n\nmodule.exports = function(eventEmitter, extensions, configPath, cwd) {\n  extensions = extensions || {};\n\n  if (!isString(configPath)) {\n    return;\n  }\n\n  var autoloads = rechoir.prepare(extensions, configPath, cwd, true);\n  if (autoloads instanceof Error) {\n    autoloads = autoloads.failures;\n  }\n\n  if (Array.isArray(autoloads)) {\n    autoloads.forEach(function (attempt) {\n      if (attempt.error) {\n        eventEmitter.emit('requireFail', attempt.moduleName, attempt.error);\n      } else {\n        eventEmitter.emit('require', attempt.moduleName, attempt.module);\n      }\n    });\n  }\n};\n"}